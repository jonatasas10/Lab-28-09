

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Sep 28 15:19:31 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F628A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  008C                     	;# 
   119  008E                     	;# 
   120  0092                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009F                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  008C                     	;# 
   156  008E                     	;# 
   157  0092                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009F                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  008C                     	;# 
   193  008E                     	;# 
   194  0092                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009F                     	;# 
   202                           
   203                           	psect	strings
   204  0001                     __pstrings:
   205  0001                     stringtab:
   206  0001                     __stringtab:
   207  0001                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210  0001                     stringdir:
   211  0001  3000               	movlw	high stringdir
   212  0002  008A               	movwf	10
   213  0003  0804               	movf	4,w
   214  0004  0A84               	incf	4,f
   215  0005  0782               	addwf	2,f
   216  0006                     __stringbase:
   217  0006  3400               	retlw	0
   218  0007                     __end_of__stringtab:
   219  0007                     _linha:
   220  0007  3402               	retlw	2
   221  0008  3404               	retlw	4
   222  0009  3440               	retlw	64
   223  000A  3480               	retlw	128
   224  000B                     __end_of_linha:
   225  0006                     _PORTB	set	6
   226  0005                     _PORTA	set	5
   227  0035                     _RB5	set	53
   228  0036                     _RB6	set	54
   229  0037                     _RB7	set	55
   230  0028                     _RA0	set	40
   231  0033                     _RB3	set	51
   232  0034                     _RB4	set	52
   233  0086                     _TRISB	set	134
   234  0085                     _TRISA	set	133
   235  008E                     _PCONbits	set	142
   236  000B                     STR_1:
   237  000B  344C               	retlw	76	;'L'
   238  000C  3465               	retlw	101	;'e'
   239  000D  3464               	retlw	100	;'d'
   240  000E  343A               	retlw	58	;':'
   241  000F  3420               	retlw	32	;' '
   242  0010  3431               	retlw	49	;'1'
   243  0011  342C               	retlw	44	;','
   244  0012  3432               	retlw	50	;'2'
   245  0013  342C               	retlw	44	;','
   246  0014  3436               	retlw	54	;'6'
   247  0015  3420               	retlw	32	;' '
   248  0016  346F               	retlw	111	;'o'
   249  0017  3475               	retlw	117	;'u'
   250  0018  3420               	retlw	32	;' '
   251  0019  3437               	retlw	55	;'7'
   252  001A  3400               	retlw	0
   253                           
   254                           	psect	cinit
   255  07FE                     start_initialization:	
   256                           ; #config settings
   257                           
   258  07FE                     __initialization:
   259  07FE                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262  07FE                     __end_of__initialization:
   263  07FE  0183               	clrf	3
   264  07FF  2E2E               	ljmp	_main	;jump to C main() function
   265                           
   266                           	psect	cstackCOMMON
   267  0070                     __pcstackCOMMON:
   268  0070                     ?_lcd_init:
   269  0070                     ?_questao_a:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_lcd_cmd:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_lcd_str:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_lcd_dat:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_main:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_lcd_wr:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ??_lcd_wr:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?___bmul:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ___bmul@multiplicand:	
   294                           ; 1 bytes @ 0x0
   295                           
   296                           
   297                           ; 1 bytes @ 0x0
   298  0070                     	ds	1
   299  0071                     ??___bmul:
   300  0071                     lcd_wr@val:	
   301                           ; 1 bytes @ 0x1
   302                           
   303                           
   304                           ; 1 bytes @ 0x1
   305  0071                     	ds	1
   306  0072                     lcd_wr@i:
   307  0072                     ___bmul@product:	
   308                           ; 1 bytes @ 0x2
   309                           
   310                           
   311                           ; 1 bytes @ 0x2
   312  0072                     	ds	1
   313  0073                     ??_lcd_cmd:
   314  0073                     ??_lcd_dat:	
   315                           ; 1 bytes @ 0x3
   316                           
   317  0073                     ___bmul@multiplier:	
   318                           ; 1 bytes @ 0x3
   319                           
   320                           
   321                           ; 1 bytes @ 0x3
   322  0073                     	ds	1
   323  0074                     ?_tc_tecla:
   324  0074                     tc_tecla@timeout:	
   325                           ; 1 bytes @ 0x4
   326                           
   327                           
   328                           ; 2 bytes @ 0x4
   329  0074                     	ds	1
   330  0075                     lcd_cmd@val:
   331  0075                     lcd_dat@val:	
   332                           ; 1 bytes @ 0x5
   333                           
   334                           
   335                           ; 1 bytes @ 0x5
   336  0075                     	ds	1
   337  0076                     ??_lcd_init:
   338  0076                     ??_lcd_str:	
   339                           ; 1 bytes @ 0x6
   340                           
   341  0076                     ??_tc_tecla:	
   342                           ; 1 bytes @ 0x6
   343                           
   344                           
   345                           ; 1 bytes @ 0x6
   346  0076                     	ds	1
   347  0077                     lcd_str@str:
   348                           
   349                           ; 1 bytes @ 0x7
   350  0077                     	ds	1
   351  0078                     lcd_str@i:
   352  0078                     tc_tecla@to:	
   353                           ; 1 bytes @ 0x8
   354                           
   355                           
   356                           ; 2 bytes @ 0x8
   357  0078                     	ds	2
   358  007A                     tc_tecla@tmp:
   359                           
   360                           ; 1 bytes @ 0xA
   361  007A                     	ds	1
   362  007B                     tc_tecla@ret:
   363                           
   364                           ; 1 bytes @ 0xB
   365  007B                     	ds	1
   366  007C                     tc_tecla@i:
   367                           
   368                           ; 1 bytes @ 0xC
   369  007C                     	ds	1
   370  007D                     ??_questao_a:
   371                           
   372                           ; 1 bytes @ 0xD
   373  007D                     	ds	1
   374  007E                     ??_main:
   375                           
   376                           	psect	cstackBANK0
   377  0020                     __pcstackBANK0:	
   378                           ; 1 bytes @ 0xE
   379                           
   380  0020                     questao_a@i:
   381                           
   382                           ; 1 bytes @ 0x0
   383  0020                     	ds	1
   384  0021                     questao_a@tecla:
   385                           
   386                           ; 1 bytes @ 0x1
   387  0021                     	ds	1
   388                           
   389                           	psect	maintext
   390  062E                     __pmaintext:	
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 34 in file "LCD_Teclado.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  tecla           1    0        unsigned char 
   401 ;;  i               1    0        unsigned char 
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : B00/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   411 ;;      Params:         0       0       0       0
   412 ;;      Locals:         0       0       0       0
   413 ;;      Temps:          0       0       0       0
   414 ;;      Totals:         0       0       0       0
   415 ;;Total ram usage:        0 bytes
   416 ;; Hardware stack levels required when called: 4
   417 ;; This function calls:
   418 ;;		_lcd_init
   419 ;;		_questao_a
   420 ;; This function is called by:
   421 ;;		Startup code after reset
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425  062E                     _main:	
   426                           ;psect for function _main
   427                           
   428  062E                     l1066:	
   429                           ;incstack = 0
   430                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   431                           
   432                           
   433                           ;LCD_Teclado.c: 35:     unsigned char i;;LCD_Teclado.c: 36:     unsigned char tecla;;LCD
      +                          _Teclado.c: 38:     PCONbits.OSCF = 1;
   434  062E  1683               	bsf	3,5	;RP0=1, select bank1
   435  062F  1303               	bcf	3,6	;RP1=0, select bank1
   436  0630  158E               	bsf	14,3	;volatile
   437  0631                     l1068:
   438                           
   439                           ;LCD_Teclado.c: 40:     TRISA = 0x30;
   440  0631  3030               	movlw	48
   441  0632  0085               	movwf	5	;volatile
   442                           
   443                           ;LCD_Teclado.c: 41:     TRISB = 0xE7;
   444  0633  30E7               	movlw	231
   445  0634  0086               	movwf	6	;volatile
   446  0635                     l1070:
   447                           
   448                           ;LCD_Teclado.c: 43:     PORTA = 0x00;
   449  0635  1283               	bcf	3,5	;RP0=0, select bank0
   450  0636  1303               	bcf	3,6	;RP1=0, select bank0
   451  0637  0185               	clrf	5	;volatile
   452  0638                     l1072:
   453                           
   454                           ;LCD_Teclado.c: 44:     PORTB = 0x00;
   455  0638  0186               	clrf	6	;volatile
   456  0639                     l1074:
   457                           
   458                           ;LCD_Teclado.c: 46:     lcd_init();
   459  0639  2702               	fcall	_lcd_init
   460  063A                     l1076:
   461                           
   462                           ;LCD_Teclado.c: 50:         questao_a();
   463  063A  26D3               	fcall	_questao_a
   464  063B  2E3A               	goto	l1076
   465  063C  2800               	ljmp	start
   466  063D                     __end_of_main:
   467                           
   468                           	psect	text1
   469  06D3                     __ptext1:	
   470 ;; *************** function _questao_a *****************
   471 ;; Defined at:
   472 ;;		line 125 in file "LCD_Teclado.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;  tecla           1    1[BANK0 ] unsigned char 
   477 ;;  i               1    0[BANK0 ] unsigned char 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   487 ;;      Params:         0       0       0       0
   488 ;;      Locals:         0       2       0       0
   489 ;;      Temps:          1       0       0       0
   490 ;;      Totals:         1       2       0       0
   491 ;;Total ram usage:        3 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; Hardware stack levels required when called: 3
   494 ;; This function calls:
   495 ;;		_lcd_cmd
   496 ;;		_lcd_dat
   497 ;;		_lcd_str
   498 ;;		_tc_tecla
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504  06D3                     _questao_a:	
   505                           ;psect for function _questao_a
   506                           
   507  06D3                     l1046:	
   508                           ;incstack = 0
   509                           ; Regs used in _questao_a: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   510                           
   511                           
   512                           ;LCD_Teclado.c: 126:     unsigned char i;;LCD_Teclado.c: 127:     unsigned char tecla;;L
      +                          CD_Teclado.c: 129:     lcd_cmd(0x01);
   513  06D3  3001               	movlw	1
   514  06D4  2668               	fcall	_lcd_cmd
   515                           
   516                           ;LCD_Teclado.c: 130:     lcd_cmd(0x80);
   517  06D5  3080               	movlw	128
   518  06D6  2668               	fcall	_lcd_cmd
   519  06D7                     l1048:
   520                           
   521                           ;LCD_Teclado.c: 131:     lcd_str("Led: 1,2,6 ou 7");
   522  06D7  3005               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   523  06D8  2652               	fcall	_lcd_str
   524  06D9                     l1050:
   525                           
   526                           ;LCD_Teclado.c: 133:     lcd_cmd(0xC0 + 1);
   527  06D9  30C1               	movlw	193
   528  06DA  2668               	fcall	_lcd_cmd
   529  06DB                     l1052:
   530                           
   531                           ;LCD_Teclado.c: 135:     i = 0;
   532  06DB  1283               	bcf	3,5	;RP0=0, select bank0
   533  06DC  1303               	bcf	3,6	;RP1=0, select bank0
   534  06DD  01A0               	clrf	questao_a@i
   535                           
   536                           ;LCD_Teclado.c: 136:     while (i < 14) {
   537  06DE  2EFB               	goto	l1064
   538  06DF                     l1054:
   539                           
   540                           ;LCD_Teclado.c: 137:         tecla = tc_tecla(3000);
   541  06DF  30B8               	movlw	184
   542  06E0  00F4               	movwf	tc_tecla@timeout
   543  06E1  300B               	movlw	11
   544  06E2  00F5               	movwf	tc_tecla@timeout+1
   545  06E3  2732               	fcall	_tc_tecla
   546  06E4  00FD               	movwf	??_questao_a
   547  06E5  087D               	movf	??_questao_a,w
   548  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   549  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   550  06E8  00A1               	movwf	questao_a@tecla
   551  06E9                     l1056:
   552                           
   553                           ;LCD_Teclado.c: 138:         if(tecla == 12){
   554  06E9  300C               	movlw	12
   555  06EA  0621               	xorwf	questao_a@tecla,w
   556  06EB  1D03               	btfss	3,2
   557  06EC  2EEE               	goto	u471
   558  06ED  2EEF               	goto	u470
   559  06EE                     u471:
   560  06EE  2EF3               	goto	l1060
   561  06EF                     u470:
   562  06EF                     l1058:
   563                           
   564                           ;LCD_Teclado.c: 139:             tecla = '*';
   565  06EF  302A               	movlw	42
   566  06F0  00FD               	movwf	??_questao_a
   567  06F1  087D               	movf	??_questao_a,w
   568  06F2  00A1               	movwf	questao_a@tecla
   569  06F3                     l1060:
   570                           
   571                           ;LCD_Teclado.c: 141:         lcd_dat(tecla);
   572  06F3  0821               	movf	questao_a@tecla,w
   573  06F4  268A               	fcall	_lcd_dat
   574  06F5                     l1062:
   575                           
   576                           ;LCD_Teclado.c: 142:         i++;
   577  06F5  3001               	movlw	1
   578  06F6  00FD               	movwf	??_questao_a
   579  06F7  087D               	movf	??_questao_a,w
   580  06F8  1283               	bcf	3,5	;RP0=0, select bank0
   581  06F9  1303               	bcf	3,6	;RP1=0, select bank0
   582  06FA  07A0               	addwf	questao_a@i,f
   583  06FB                     l1064:
   584                           
   585                           ;LCD_Teclado.c: 136:     while (i < 14) {
   586  06FB  300E               	movlw	14
   587  06FC  0220               	subwf	questao_a@i,w
   588  06FD  1C03               	skipc
   589  06FE  2F00               	goto	u481
   590  06FF  2F01               	goto	u480
   591  0700                     u481:
   592  0700  2EDF               	goto	l1054
   593  0701                     u480:
   594  0701                     l37:
   595  0701  0008               	return
   596  0702                     __end_of_questao_a:
   597                           
   598                           	psect	text2
   599  0732                     __ptext2:	
   600 ;; *************** function _tc_tecla *****************
   601 ;; Defined at:
   602 ;;		line 26 in file "teclado.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  timeout         2    4[COMMON] unsigned int 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  to              2    8[COMMON] unsigned int 
   607 ;;  i               1   12[COMMON] unsigned char 
   608 ;;  ret             1   11[COMMON] unsigned char 
   609 ;;  tmp             1   10[COMMON] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      unsigned char 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   619 ;;      Params:         2       0       0       0
   620 ;;      Locals:         5       0       0       0
   621 ;;      Temps:          2       0       0       0
   622 ;;      Totals:         9       0       0       0
   623 ;;Total ram usage:        9 bytes
   624 ;; Hardware stack levels used: 1
   625 ;; Hardware stack levels required when called: 1
   626 ;; This function calls:
   627 ;;		___bmul
   628 ;; This function is called by:
   629 ;;		_questao_a
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633  0732                     _tc_tecla:	
   634                           ;psect for function _tc_tecla
   635                           
   636  0732                     l954:	
   637                           ;incstack = 0
   638                           ; Regs used in _tc_tecla: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   639                           
   640                           
   641                           ;teclado.c: 27:     unsigned int to = 0;
   642  0732  01F8               	clrf	tc_tecla@to
   643  0733  01F9               	clrf	tc_tecla@to+1
   644                           
   645                           ;teclado.c: 28:     unsigned char i;;teclado.c: 29:     unsigned char ret = 0;
   646  0734  01FB               	clrf	tc_tecla@ret
   647  0735                     l956:
   648                           
   649                           ;teclado.c: 30:     unsigned char tmp = PORTA;
   650  0735  1283               	bcf	3,5	;RP0=0, select bank0
   651  0736  1303               	bcf	3,6	;RP1=0, select bank0
   652  0737  0805               	movf	5,w	;volatile
   653  0738  00F6               	movwf	??_tc_tecla
   654  0739  0876               	movf	??_tc_tecla,w
   655  073A  00FA               	movwf	tc_tecla@tmp
   656                           
   657                           ;teclado.c: 32:     while (((to < timeout) || (!timeout))&&(!ret)) {
   658  073B  2FD3               	goto	l80
   659  073C                     l958:
   660                           
   661                           ;teclado.c: 33:         for (i = 0; i < 4; i++) {
   662  073C  01FC               	clrf	tc_tecla@i
   663  073D                     l964:
   664                           
   665                           ;teclado.c: 34:             PORTA |= linha[i];
   666  073D  087C               	movf	tc_tecla@i,w
   667  073E  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
   668  073F  0084               	movwf	4
   669  0740  2001               	fcall	stringdir
   670  0741  00F6               	movwf	??_tc_tecla
   671  0742  0876               	movf	??_tc_tecla,w
   672  0743  1283               	bcf	3,5	;RP0=0, select bank0
   673  0744  1303               	bcf	3,6	;RP1=0, select bank0
   674  0745  0485               	iorwf	5,f	;volatile
   675  0746                     l966:
   676                           
   677                           ;teclado.c: 36:             if (RB7) {
   678  0746  1F86               	btfss	6,7	;volatile
   679  0747  2F49               	goto	u321
   680  0748  2F4A               	goto	u320
   681  0749                     u321:
   682  0749  2F6B               	goto	l84
   683  074A                     u320:
   684  074A                     l968:
   685                           
   686                           ;teclado.c: 37:                 _delay((unsigned long)((20)*(4000000/4000.0)));
   687  074A  301A               	movlw	26
   688  074B  00F7               	movwf	??_tc_tecla+1
   689  074C  30F8               	movlw	248
   690  074D  00F6               	movwf	??_tc_tecla
   691  074E                     u497:
   692  074E  0BF6               	decfsz	??_tc_tecla,f
   693  074F  2F4E               	goto	u497
   694  0750  0BF7               	decfsz	??_tc_tecla+1,f
   695  0751  2F4E               	goto	u497
   696  0752  0000               	nop
   697  0753                     l970:
   698                           
   699                           ;teclado.c: 38:                 if (RB7) {
   700  0753  1283               	bcf	3,5	;RP0=0, select bank0
   701  0754  1303               	bcf	3,6	;RP1=0, select bank0
   702  0755  1F86               	btfss	6,7	;volatile
   703  0756  2F58               	goto	u331
   704  0757  2F59               	goto	u330
   705  0758                     u331:
   706  0758  2F6B               	goto	l84
   707  0759                     u330:
   708  0759  2F64               	goto	l976
   709  075A                     l974:
   710                           
   711                           ;teclado.c: 40:                         ret = 1 + (i * 3);
   712  075A  3003               	movlw	3
   713  075B  00F6               	movwf	??_tc_tecla
   714  075C  0876               	movf	??_tc_tecla,w
   715  075D  00F0               	movwf	___bmul@multiplicand
   716  075E  087C               	movf	tc_tecla@i,w
   717  075F  263D               	fcall	___bmul
   718  0760  3E01               	addlw	1
   719  0761  00F7               	movwf	??_tc_tecla+1
   720  0762  0877               	movf	??_tc_tecla+1,w
   721  0763  00FB               	movwf	tc_tecla@ret
   722  0764                     l976:
   723                           
   724                           ;teclado.c: 39:                     while (RB7)
   725  0764  1283               	bcf	3,5	;RP0=0, select bank0
   726  0765  1303               	bcf	3,6	;RP1=0, select bank0
   727  0766  1B86               	btfsc	6,7	;volatile
   728  0767  2F69               	goto	u341
   729  0768  2F6A               	goto	u340
   730  0769                     u341:
   731  0769  2F5A               	goto	l974
   732  076A                     u340:
   733  076A  2FC4               	goto	l1002
   734  076B                     l84:	
   735                           ;teclado.c: 43:             }
   736                           
   737                           
   738                           ;teclado.c: 45:             if (RB6) {
   739  076B  1F06               	btfss	6,6	;volatile
   740  076C  2F6E               	goto	u351
   741  076D  2F6F               	goto	u350
   742  076E                     u351:
   743  076E  2F90               	goto	l89
   744  076F                     u350:
   745  076F                     l978:
   746                           
   747                           ;teclado.c: 46:                 _delay((unsigned long)((20)*(4000000/4000.0)));
   748  076F  301A               	movlw	26
   749  0770  00F7               	movwf	??_tc_tecla+1
   750  0771  30F8               	movlw	248
   751  0772  00F6               	movwf	??_tc_tecla
   752  0773                     u507:
   753  0773  0BF6               	decfsz	??_tc_tecla,f
   754  0774  2F73               	goto	u507
   755  0775  0BF7               	decfsz	??_tc_tecla+1,f
   756  0776  2F73               	goto	u507
   757  0777  0000               	nop
   758  0778                     l980:
   759                           
   760                           ;teclado.c: 47:                 if (RB6) {
   761  0778  1283               	bcf	3,5	;RP0=0, select bank0
   762  0779  1303               	bcf	3,6	;RP1=0, select bank0
   763  077A  1F06               	btfss	6,6	;volatile
   764  077B  2F7D               	goto	u361
   765  077C  2F7E               	goto	u360
   766  077D                     u361:
   767  077D  2F90               	goto	l89
   768  077E                     u360:
   769  077E  2F89               	goto	l986
   770  077F                     l984:
   771                           
   772                           ;teclado.c: 49:                         ret = 2 + (i * 3);
   773  077F  3003               	movlw	3
   774  0780  00F6               	movwf	??_tc_tecla
   775  0781  0876               	movf	??_tc_tecla,w
   776  0782  00F0               	movwf	___bmul@multiplicand
   777  0783  087C               	movf	tc_tecla@i,w
   778  0784  263D               	fcall	___bmul
   779  0785  3E02               	addlw	2
   780  0786  00F7               	movwf	??_tc_tecla+1
   781  0787  0877               	movf	??_tc_tecla+1,w
   782  0788  00FB               	movwf	tc_tecla@ret
   783  0789                     l986:
   784                           
   785                           ;teclado.c: 48:                     while (RB6)
   786  0789  1283               	bcf	3,5	;RP0=0, select bank0
   787  078A  1303               	bcf	3,6	;RP1=0, select bank0
   788  078B  1B06               	btfsc	6,6	;volatile
   789  078C  2F8E               	goto	u371
   790  078D  2F8F               	goto	u370
   791  078E                     u371:
   792  078E  2F7F               	goto	l984
   793  078F                     u370:
   794  078F  2FC4               	goto	l1002
   795  0790                     l89:	
   796                           ;teclado.c: 52:             }
   797                           
   798                           
   799                           ;teclado.c: 54:             if (RB5) {
   800  0790  1E86               	btfss	6,5	;volatile
   801  0791  2F93               	goto	u381
   802  0792  2F94               	goto	u380
   803  0793                     u381:
   804  0793  2FB2               	goto	l996
   805  0794                     u380:
   806  0794                     l988:
   807                           
   808                           ;teclado.c: 55:                 _delay((unsigned long)((20)*(4000000/4000.0)));
   809  0794  301A               	movlw	26
   810  0795  00F7               	movwf	??_tc_tecla+1
   811  0796  30F8               	movlw	248
   812  0797  00F6               	movwf	??_tc_tecla
   813  0798                     u517:
   814  0798  0BF6               	decfsz	??_tc_tecla,f
   815  0799  2F98               	goto	u517
   816  079A  0BF7               	decfsz	??_tc_tecla+1,f
   817  079B  2F98               	goto	u517
   818  079C  0000               	nop
   819  079D                     l990:
   820                           
   821                           ;teclado.c: 56:                 if (RB5) {
   822  079D  1283               	bcf	3,5	;RP0=0, select bank0
   823  079E  1303               	bcf	3,6	;RP1=0, select bank0
   824  079F  1E86               	btfss	6,5	;volatile
   825  07A0  2FA2               	goto	u391
   826  07A1  2FA3               	goto	u390
   827  07A2                     u391:
   828  07A2  2FB2               	goto	l996
   829  07A3                     u390:
   830  07A3                     l96:
   831  07A3  1A86               	btfsc	6,5	;volatile
   832  07A4  2FA6               	goto	u401
   833  07A5  2FA7               	goto	u400
   834  07A6                     u401:
   835  07A6  2FA3               	goto	l96
   836  07A7                     u400:
   837  07A7                     l994:
   838                           
   839                           ;teclado.c: 58:                     ret = 3 + (i * 3);
   840  07A7  3003               	movlw	3
   841  07A8  00F6               	movwf	??_tc_tecla
   842  07A9  0876               	movf	??_tc_tecla,w
   843  07AA  00F0               	movwf	___bmul@multiplicand
   844  07AB  087C               	movf	tc_tecla@i,w
   845  07AC  263D               	fcall	___bmul
   846  07AD  3E03               	addlw	3
   847  07AE  00F7               	movwf	??_tc_tecla+1
   848  07AF  0877               	movf	??_tc_tecla+1,w
   849  07B0  00FB               	movwf	tc_tecla@ret
   850                           
   851                           ;teclado.c: 59:                     break;
   852  07B1  2FC4               	goto	l1002
   853  07B2                     l996:
   854                           
   855                           ;teclado.c: 63:             PORTA &= ~linha[i];
   856  07B2  087C               	movf	tc_tecla@i,w
   857  07B3  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
   858  07B4  0084               	movwf	4
   859  07B5  2001               	fcall	stringdir
   860  07B6  3AFF               	xorlw	255
   861  07B7  00F6               	movwf	??_tc_tecla
   862  07B8  0876               	movf	??_tc_tecla,w
   863  07B9  0585               	andwf	5,f	;volatile
   864  07BA                     l998:
   865                           
   866                           ;teclado.c: 64:         }
   867  07BA  3001               	movlw	1
   868  07BB  00F6               	movwf	??_tc_tecla
   869  07BC  0876               	movf	??_tc_tecla,w
   870  07BD  07FC               	addwf	tc_tecla@i,f
   871  07BE                     l1000:
   872  07BE  3004               	movlw	4
   873  07BF  027C               	subwf	tc_tecla@i,w
   874  07C0  1C03               	skipc
   875  07C1  2FC3               	goto	u411
   876  07C2  2FC4               	goto	u410
   877  07C3                     u411:
   878  07C3  2F3D               	goto	l964
   879  07C4                     u410:
   880  07C4                     l1002:
   881                           
   882                           ;teclado.c: 65:         _delay((unsigned long)((20)*(4000000/4000.0)));
   883  07C4  301A               	movlw	26
   884  07C5  00F7               	movwf	??_tc_tecla+1
   885  07C6  30F8               	movlw	248
   886  07C7  00F6               	movwf	??_tc_tecla
   887  07C8                     u527:
   888  07C8  0BF6               	decfsz	??_tc_tecla,f
   889  07C9  2FC8               	goto	u527
   890  07CA  0BF7               	decfsz	??_tc_tecla+1,f
   891  07CB  2FC8               	goto	u527
   892  07CC  0000               	nop
   893                           
   894                           ;teclado.c: 66:         to += 5;
   895  07CD  3005               	movlw	5
   896  07CE  07F8               	addwf	tc_tecla@to,f
   897  07CF  1803               	skipnc
   898  07D0  0AF9               	incf	tc_tecla@to+1,f
   899  07D1  3000               	movlw	0
   900  07D2  07F9               	addwf	tc_tecla@to+1,f
   901  07D3                     l80:	
   902                           ;teclado.c: 67:     }
   903                           
   904                           
   905                           ;teclado.c: 32:     while (((to < timeout) || (!timeout))&&(!ret)) {
   906  07D3  0875               	movf	tc_tecla@timeout+1,w
   907  07D4  0279               	subwf	tc_tecla@to+1,w
   908  07D5  1D03               	skipz
   909  07D6  2FD9               	goto	u425
   910  07D7  0874               	movf	tc_tecla@timeout,w
   911  07D8  0278               	subwf	tc_tecla@to,w
   912  07D9                     u425:
   913  07D9  1C03               	skipc
   914  07DA  2FDC               	goto	u421
   915  07DB  2FDD               	goto	u420
   916  07DC                     u421:
   917  07DC  2FE3               	goto	l1006
   918  07DD                     u420:
   919  07DD                     l1004:
   920  07DD  0874               	movf	tc_tecla@timeout,w
   921  07DE  0475               	iorwf	tc_tecla@timeout+1,w
   922  07DF  1D03               	btfss	3,2
   923  07E0  2FE2               	goto	u431
   924  07E1  2FE3               	goto	u430
   925  07E2                     u431:
   926  07E2  2FE8               	goto	l1008
   927  07E3                     u430:
   928  07E3                     l1006:
   929  07E3  087B               	movf	tc_tecla@ret,w
   930  07E4  1903               	btfsc	3,2
   931  07E5  2FE7               	goto	u441
   932  07E6  2FE8               	goto	u440
   933  07E7                     u441:
   934  07E7  2F3C               	goto	l958
   935  07E8                     u440:
   936  07E8                     l1008:
   937                           
   938                           ;teclado.c: 69:     if (!ret)ret = 255;
   939  07E8  087B               	movf	tc_tecla@ret,w
   940  07E9  1D03               	btfss	3,2
   941  07EA  2FEC               	goto	u451
   942  07EB  2FED               	goto	u450
   943  07EC                     u451:
   944  07EC  2FF1               	goto	l1012
   945  07ED                     u450:
   946  07ED                     l1010:
   947  07ED  30FF               	movlw	255
   948  07EE  00F6               	movwf	??_tc_tecla
   949  07EF  0876               	movf	??_tc_tecla,w
   950  07F0  00FB               	movwf	tc_tecla@ret
   951  07F1                     l1012:
   952                           
   953                           ;teclado.c: 70:     if (ret == 11)ret = 0;
   954  07F1  300B               	movlw	11
   955  07F2  067B               	xorwf	tc_tecla@ret,w
   956  07F3  1D03               	btfss	3,2
   957  07F4  2FF6               	goto	u461
   958  07F5  2FF7               	goto	u460
   959  07F6                     u461:
   960  07F6  2FF8               	goto	l1016
   961  07F7                     u460:
   962  07F7                     l1014:
   963  07F7  01FB               	clrf	tc_tecla@ret
   964  07F8                     l1016:
   965                           
   966                           ;teclado.c: 71:     PORTA = tmp;
   967  07F8  087A               	movf	tc_tecla@tmp,w
   968  07F9  1283               	bcf	3,5	;RP0=0, select bank0
   969  07FA  1303               	bcf	3,6	;RP1=0, select bank0
   970  07FB  0085               	movwf	5	;volatile
   971  07FC                     l1018:
   972                           
   973                           ;teclado.c: 72:     return ret;
   974  07FC  087B               	movf	tc_tecla@ret,w
   975  07FD                     l106:
   976  07FD  0008               	return
   977  07FE                     __end_of_tc_tecla:
   978                           
   979                           	psect	text3
   980  063D                     __ptext3:	
   981 ;; *************** function ___bmul *****************
   982 ;; Defined at:
   983 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul8.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  multiplier      1    wreg     unsigned char 
   986 ;;  multiplicand    1    0[COMMON] unsigned char 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  multiplier      1    3[COMMON] unsigned char 
   989 ;;  product         1    2[COMMON] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      unsigned char 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   999 ;;      Params:         1       0       0       0
  1000 ;;      Locals:         2       0       0       0
  1001 ;;      Temps:          1       0       0       0
  1002 ;;      Totals:         4       0       0       0
  1003 ;;Total ram usage:        4 bytes
  1004 ;; Hardware stack levels used: 1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_tc_tecla
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012  063D                     ___bmul:	
  1013                           ;psect for function ___bmul
  1014                           
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1018                           ;___bmul@multiplier stored from wreg
  1019  063D  00F3               	movwf	___bmul@multiplier
  1020  063E                     l918:
  1021  063E  01F2               	clrf	___bmul@product
  1022  063F                     l920:
  1023  063F  1C73               	btfss	___bmul@multiplier,0
  1024  0640  2E42               	goto	u291
  1025  0641  2E43               	goto	u290
  1026  0642                     u291:
  1027  0642  2E47               	goto	l924
  1028  0643                     u290:
  1029  0643                     l922:
  1030  0643  0870               	movf	___bmul@multiplicand,w
  1031  0644  00F1               	movwf	??___bmul
  1032  0645  0871               	movf	??___bmul,w
  1033  0646  07F2               	addwf	___bmul@product,f
  1034  0647                     l924:
  1035  0647  1003               	clrc
  1036  0648  0DF0               	rlf	___bmul@multiplicand,f
  1037  0649                     l926:
  1038  0649  1003               	clrc
  1039  064A  0CF3               	rrf	___bmul@multiplier,f
  1040  064B  0873               	movf	___bmul@multiplier,w
  1041  064C  1D03               	btfss	3,2
  1042  064D  2E4F               	goto	u301
  1043  064E  2E50               	goto	u300
  1044  064F                     u301:
  1045  064F  2E3F               	goto	l920
  1046  0650                     u300:
  1047  0650                     l928:
  1048  0650  0872               	movf	___bmul@product,w
  1049  0651                     l218:
  1050  0651  0008               	return
  1051  0652                     __end_of___bmul:
  1052                           
  1053                           	psect	text4
  1054  0652                     __ptext4:	
  1055 ;; *************** function _lcd_str *****************
  1056 ;; Defined at:
  1057 ;;		line 73 in file "lcd.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  str             1    wreg     PTR const unsigned char 
  1060 ;;		 -> STR_1(16), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  str             1    7[COMMON] PTR const unsigned char 
  1063 ;;		 -> STR_1(16), 
  1064 ;;  i               1    8[COMMON] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1074 ;;      Params:         0       0       0       0
  1075 ;;      Locals:         2       0       0       0
  1076 ;;      Temps:          1       0       0       0
  1077 ;;      Totals:         3       0       0       0
  1078 ;;Total ram usage:        3 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 2
  1081 ;; This function calls:
  1082 ;;		_lcd_dat
  1083 ;; This function is called by:
  1084 ;;		_questao_a
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088  0652                     _lcd_str:	
  1089                           ;psect for function _lcd_str
  1090                           
  1091                           
  1092                           ;incstack = 0
  1093                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1094                           ;lcd_str@str stored from wreg
  1095  0652  00F7               	movwf	lcd_str@str
  1096  0653                     l946:
  1097                           
  1098                           ;lcd.c: 74:     unsigned char i = 0;
  1099  0653  01F8               	clrf	lcd_str@i
  1100                           
  1101                           ;lcd.c: 76:     while (str[i]) {
  1102  0654  2E5E               	goto	l952
  1103  0655                     l948:
  1104                           
  1105                           ;lcd.c: 77:         lcd_dat(str[i]);
  1106  0655  0878               	movf	lcd_str@i,w
  1107  0656  0777               	addwf	lcd_str@str,w
  1108  0657  0084               	movwf	4
  1109  0658  2001               	fcall	stringdir
  1110  0659  268A               	fcall	_lcd_dat
  1111  065A                     l950:
  1112                           
  1113                           ;lcd.c: 78:         i++;
  1114  065A  3001               	movlw	1
  1115  065B  00F6               	movwf	??_lcd_str
  1116  065C  0876               	movf	??_lcd_str,w
  1117  065D  07F8               	addwf	lcd_str@i,f
  1118  065E                     l952:
  1119                           
  1120                           ;lcd.c: 76:     while (str[i]) {
  1121  065E  0878               	movf	lcd_str@i,w
  1122  065F  0777               	addwf	lcd_str@str,w
  1123  0660  0084               	movwf	4
  1124  0661  2001               	fcall	stringdir
  1125  0662  3A00               	xorlw	0
  1126  0663  1D03               	skipz
  1127  0664  2E66               	goto	u311
  1128  0665  2E67               	goto	u310
  1129  0666                     u311:
  1130  0666  2E55               	goto	l948
  1131  0667                     u310:
  1132  0667                     l65:
  1133  0667  0008               	return
  1134  0668                     __end_of_lcd_str:
  1135                           
  1136                           	psect	text5
  1137  068A                     __ptext5:	
  1138 ;; *************** function _lcd_dat *****************
  1139 ;; Defined at:
  1140 ;;		line 45 in file "lcd.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  val             1    wreg     unsigned char 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  val             1    5[COMMON] unsigned char 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, pclath, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1154 ;;      Params:         0       0       0       0
  1155 ;;      Locals:         1       0       0       0
  1156 ;;      Temps:          2       0       0       0
  1157 ;;      Totals:         3       0       0       0
  1158 ;;Total ram usage:        3 bytes
  1159 ;; Hardware stack levels used: 1
  1160 ;; Hardware stack levels required when called: 1
  1161 ;; This function calls:
  1162 ;;		_lcd_wr
  1163 ;; This function is called by:
  1164 ;;		_questao_a
  1165 ;;		_lcd_str
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169  068A                     _lcd_dat:	
  1170                           ;psect for function _lcd_dat
  1171                           
  1172                           
  1173                           ;incstack = 0
  1174                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  1175                           ;lcd_dat@val stored from wreg
  1176  068A  00F5               	movwf	lcd_dat@val
  1177  068B                     l904:
  1178                           
  1179                           ;lcd.c: 46:     RA0 = 1;
  1180  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1181  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1182  068D  1405               	bsf	5,0	;volatile
  1183  068E                     l906:
  1184                           
  1185                           ;lcd.c: 47:     lcd_wr(val);
  1186  068E  0875               	movf	lcd_dat@val,w
  1187  068F  26AC               	fcall	_lcd_wr
  1188  0690                     l908:
  1189                           
  1190                           ;lcd.c: 48:     RB3 = 1;
  1191  0690  1283               	bcf	3,5	;RP0=0, select bank0
  1192  0691  1303               	bcf	3,6	;RP1=0, select bank0
  1193  0692  1586               	bsf	6,3	;volatile
  1194  0693                     l910:
  1195                           
  1196                           ;lcd.c: 49:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1197  0693  3004               	movlw	4
  1198  0694  00F4               	movwf	??_lcd_dat+1
  1199  0695  30E4               	movlw	228
  1200  0696  00F3               	movwf	??_lcd_dat
  1201  0697                     u537:
  1202  0697  0BF3               	decfsz	??_lcd_dat,f
  1203  0698  2E97               	goto	u537
  1204  0699  0BF4               	decfsz	??_lcd_dat+1,f
  1205  069A  2E97               	goto	u537
  1206  069B  0000               	nop
  1207  069C                     l912:
  1208                           
  1209                           ;lcd.c: 50:     RA0 = 0;
  1210  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1211  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1212  069E  1005               	bcf	5,0	;volatile
  1213  069F                     l914:
  1214                           
  1215                           ;lcd.c: 51:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1216  069F  3004               	movlw	4
  1217  06A0  00F4               	movwf	??_lcd_dat+1
  1218  06A1  30E4               	movlw	228
  1219  06A2  00F3               	movwf	??_lcd_dat
  1220  06A3                     u547:
  1221  06A3  0BF3               	decfsz	??_lcd_dat,f
  1222  06A4  2EA3               	goto	u547
  1223  06A5  0BF4               	decfsz	??_lcd_dat+1,f
  1224  06A6  2EA3               	goto	u547
  1225  06A7  0000               	nop
  1226  06A8                     l916:
  1227                           
  1228                           ;lcd.c: 52:     RA0 = 1;
  1229  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1230  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  1231  06AA  1405               	bsf	5,0	;volatile
  1232  06AB                     l56:
  1233  06AB  0008               	return
  1234  06AC                     __end_of_lcd_dat:
  1235                           
  1236                           	psect	text6
  1237  0702                     __ptext6:	
  1238 ;; *************** function _lcd_init *****************
  1239 ;; Defined at:
  1240 ;;		line 55 in file "lcd.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, pclath, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1254 ;;      Params:         0       0       0       0
  1255 ;;      Locals:         0       0       0       0
  1256 ;;      Temps:          2       0       0       0
  1257 ;;      Totals:         2       0       0       0
  1258 ;;Total ram usage:        2 bytes
  1259 ;; Hardware stack levels used: 1
  1260 ;; Hardware stack levels required when called: 2
  1261 ;; This function calls:
  1262 ;;		_lcd_cmd
  1263 ;; This function is called by:
  1264 ;;		_main
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268  0702                     _lcd_init:	
  1269                           ;psect for function _lcd_init
  1270                           
  1271  0702                     l1022:	
  1272                           ;incstack = 0
  1273                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1274                           
  1275                           
  1276                           ;lcd.c: 56:     RA0 = 0;
  1277  0702  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0703  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0704  1005               	bcf	5,0	;volatile
  1280                           
  1281                           ;lcd.c: 57:     RB3 = 0;
  1282  0705  1186               	bcf	6,3	;volatile
  1283  0706                     l1024:
  1284                           
  1285                           ;lcd.c: 58:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1286  0706  301A               	movlw	26
  1287  0707  00F7               	movwf	??_lcd_init+1
  1288  0708  30F8               	movlw	248
  1289  0709  00F6               	movwf	??_lcd_init
  1290  070A                     u557:
  1291  070A  0BF6               	decfsz	??_lcd_init,f
  1292  070B  2F0A               	goto	u557
  1293  070C  0BF7               	decfsz	??_lcd_init+1,f
  1294  070D  2F0A               	goto	u557
  1295  070E  0000               	nop
  1296  070F                     l1026:
  1297                           
  1298                           ;lcd.c: 59:     RA0 = 1;
  1299  070F  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0710  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0711  1405               	bsf	5,0	;volatile
  1302  0712                     l1028:
  1303                           
  1304                           ;lcd.c: 61:     lcd_cmd(0x30);
  1305  0712  3030               	movlw	48
  1306  0713  2668               	fcall	_lcd_cmd
  1307  0714                     l1030:
  1308                           
  1309                           ;lcd.c: 62:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1310  0714  3007               	movlw	7
  1311  0715  00F7               	movwf	??_lcd_init+1
  1312  0716  307D               	movlw	125
  1313  0717  00F6               	movwf	??_lcd_init
  1314  0718                     u567:
  1315  0718  0BF6               	decfsz	??_lcd_init,f
  1316  0719  2F18               	goto	u567
  1317  071A  0BF7               	decfsz	??_lcd_init+1,f
  1318  071B  2F18               	goto	u567
  1319                           
  1320                           ;lcd.c: 63:     lcd_cmd(0x30);
  1321  071C  3030               	movlw	48
  1322  071D  2668               	fcall	_lcd_cmd
  1323  071E                     l1032:
  1324                           
  1325                           ;lcd.c: 64:     _delay((unsigned long)((1)*(4000000/4000.0)));
  1326  071E  30C7               	movlw	199
  1327  071F  00F6               	movwf	??_lcd_init
  1328  0720                     u577:
  1329  0720  2F21               	nop2
  1330  0721  0BF6               	decfsz	??_lcd_init,f
  1331  0722  2F20               	goto	u577
  1332  0723  2F24               	nop2
  1333  0724  2F25               	nop2
  1334  0725                     l1034:
  1335                           
  1336                           ;lcd.c: 65:     lcd_cmd(0x38);
  1337  0725  3038               	movlw	56
  1338  0726  2668               	fcall	_lcd_cmd
  1339  0727                     l1036:
  1340                           
  1341                           ;lcd.c: 66:     lcd_cmd(0x08);
  1342  0727  3008               	movlw	8
  1343  0728  2668               	fcall	_lcd_cmd
  1344  0729                     l1038:
  1345                           
  1346                           ;lcd.c: 67:     lcd_cmd(0x0F);
  1347  0729  300F               	movlw	15
  1348  072A  2668               	fcall	_lcd_cmd
  1349  072B                     l1040:
  1350                           
  1351                           ;lcd.c: 68:     lcd_cmd(0x01);
  1352  072B  3001               	movlw	1
  1353  072C  2668               	fcall	_lcd_cmd
  1354  072D                     l1042:
  1355                           
  1356                           ;lcd.c: 69:     lcd_cmd(0x38);
  1357  072D  3038               	movlw	56
  1358  072E  2668               	fcall	_lcd_cmd
  1359  072F                     l1044:
  1360                           
  1361                           ;lcd.c: 70:     lcd_cmd(0x80);
  1362  072F  3080               	movlw	128
  1363  0730  2668               	fcall	_lcd_cmd
  1364  0731                     l59:
  1365  0731  0008               	return
  1366  0732                     __end_of_lcd_init:
  1367                           
  1368                           	psect	text7
  1369  0668                     __ptext7:	
  1370 ;; *************** function _lcd_cmd *****************
  1371 ;; Defined at:
  1372 ;;		line 35 in file "lcd.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  val             1    wreg     unsigned char 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  val             1    5[COMMON] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1386 ;;      Params:         0       0       0       0
  1387 ;;      Locals:         1       0       0       0
  1388 ;;      Temps:          2       0       0       0
  1389 ;;      Totals:         3       0       0       0
  1390 ;;Total ram usage:        3 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 1
  1393 ;; This function calls:
  1394 ;;		_lcd_wr
  1395 ;; This function is called by:
  1396 ;;		_questao_a
  1397 ;;		_lcd_init
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401  0668                     _lcd_cmd:	
  1402                           ;psect for function _lcd_cmd
  1403                           
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  1407                           ;lcd_cmd@val stored from wreg
  1408  0668  00F5               	movwf	lcd_cmd@val
  1409  0669                     l932:
  1410                           
  1411                           ;lcd.c: 36:     RA0 = 1;
  1412  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1413  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1414  066B  1405               	bsf	5,0	;volatile
  1415  066C                     l934:
  1416                           
  1417                           ;lcd.c: 37:     lcd_wr(val);
  1418  066C  0875               	movf	lcd_cmd@val,w
  1419  066D  26AC               	fcall	_lcd_wr
  1420  066E                     l936:
  1421                           
  1422                           ;lcd.c: 38:     RB3 = 0;
  1423  066E  1283               	bcf	3,5	;RP0=0, select bank0
  1424  066F  1303               	bcf	3,6	;RP1=0, select bank0
  1425  0670  1186               	bcf	6,3	;volatile
  1426  0671                     l938:
  1427                           
  1428                           ;lcd.c: 39:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1429  0671  3004               	movlw	4
  1430  0672  00F4               	movwf	??_lcd_cmd+1
  1431  0673  30E4               	movlw	228
  1432  0674  00F3               	movwf	??_lcd_cmd
  1433  0675                     u587:
  1434  0675  0BF3               	decfsz	??_lcd_cmd,f
  1435  0676  2E75               	goto	u587
  1436  0677  0BF4               	decfsz	??_lcd_cmd+1,f
  1437  0678  2E75               	goto	u587
  1438  0679  0000               	nop
  1439  067A                     l940:
  1440                           
  1441                           ;lcd.c: 40:     RA0 = 0;
  1442  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1443  067B  1303               	bcf	3,6	;RP1=0, select bank0
  1444  067C  1005               	bcf	5,0	;volatile
  1445  067D                     l942:
  1446                           
  1447                           ;lcd.c: 41:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1448  067D  3004               	movlw	4
  1449  067E  00F4               	movwf	??_lcd_cmd+1
  1450  067F  30E4               	movlw	228
  1451  0680  00F3               	movwf	??_lcd_cmd
  1452  0681                     u597:
  1453  0681  0BF3               	decfsz	??_lcd_cmd,f
  1454  0682  2E81               	goto	u597
  1455  0683  0BF4               	decfsz	??_lcd_cmd+1,f
  1456  0684  2E81               	goto	u597
  1457  0685  0000               	nop
  1458  0686                     l944:
  1459                           
  1460                           ;lcd.c: 42:     RA0 = 1;
  1461  0686  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0687  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0688  1405               	bsf	5,0	;volatile
  1464  0689                     l53:
  1465  0689  0008               	return
  1466  068A                     __end_of_lcd_cmd:
  1467                           
  1468                           	psect	text8
  1469  06AC                     __ptext8:	
  1470 ;; *************** function _lcd_wr *****************
  1471 ;; Defined at:
  1472 ;;		line 23 in file "lcd.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  val             1    wreg     unsigned char 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  val             1    1[COMMON] unsigned char 
  1477 ;;  i               1    2[COMMON] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1487 ;;      Params:         0       0       0       0
  1488 ;;      Locals:         2       0       0       0
  1489 ;;      Temps:          1       0       0       0
  1490 ;;      Totals:         3       0       0       0
  1491 ;;Total ram usage:        3 bytes
  1492 ;; Hardware stack levels used: 1
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_lcd_cmd
  1497 ;;		_lcd_dat
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501  06AC                     _lcd_wr:	
  1502                           ;psect for function _lcd_wr
  1503                           
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in _lcd_wr: [wreg+status,2+status,0]
  1507                           ;lcd_wr@val stored from wreg
  1508  06AC  00F1               	movwf	lcd_wr@val
  1509  06AD                     l888:
  1510                           
  1511                           ;lcd.c: 24:     unsigned char i;;lcd.c: 26:     RB4 = 0;
  1512  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  1513  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  1514  06AF  1206               	bcf	6,4	;volatile
  1515  06B0                     l890:
  1516                           
  1517                           ;lcd.c: 28:     for (i = 0; i < 8; i++) {
  1518  06B0  01F2               	clrf	lcd_wr@i
  1519  06B1                     l896:
  1520                           
  1521                           ;lcd.c: 29:         RB3 = ((val >> (7 - i))&0x01);
  1522  06B1  0871               	movf	lcd_wr@val,w
  1523  06B2  00F0               	movwf	??_lcd_wr
  1524  06B3  0872               	movf	lcd_wr@i,w
  1525  06B4  3C07               	sublw	7
  1526  06B5  3E01               	addlw	1
  1527  06B6  2EB9               	goto	u254
  1528  06B7                     u255:
  1529  06B7  1003               	clrc
  1530  06B8  0CF0               	rrf	??_lcd_wr,f
  1531  06B9                     u254:
  1532  06B9  3EFF               	addlw	-1
  1533  06BA  1D03               	skipz
  1534  06BB  2EB7               	goto	u255
  1535  06BC  1870               	btfsc	??_lcd_wr,0
  1536  06BD  2EBF               	goto	u261
  1537  06BE  2EC3               	goto	u260
  1538  06BF                     u261:
  1539  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  1540  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  1541  06C1  1586               	bsf	6,3	;volatile
  1542  06C2  2EC6               	goto	u274
  1543  06C3                     u260:
  1544  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  1545  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  1546  06C5  1186               	bcf	6,3	;volatile
  1547  06C6                     u274:
  1548  06C6                     l898:
  1549                           
  1550                           ;lcd.c: 30:         RB4 = 1;
  1551  06C6  1606               	bsf	6,4	;volatile
  1552  06C7                     l900:
  1553                           
  1554                           ;lcd.c: 31:         RB4 = 0;
  1555  06C7  1206               	bcf	6,4	;volatile
  1556                           
  1557                           ;lcd.c: 32:     }
  1558  06C8  3001               	movlw	1
  1559  06C9  00F0               	movwf	??_lcd_wr
  1560  06CA  0870               	movf	??_lcd_wr,w
  1561  06CB  07F2               	addwf	lcd_wr@i,f
  1562  06CC                     l902:
  1563  06CC  3008               	movlw	8
  1564  06CD  0272               	subwf	lcd_wr@i,w
  1565  06CE  1C03               	skipc
  1566  06CF  2ED1               	goto	u281
  1567  06D0  2ED2               	goto	u280
  1568  06D1                     u281:
  1569  06D1  2EB1               	goto	l896
  1570  06D2                     u280:
  1571  06D2                     l50:
  1572  06D2  0008               	return
  1573  06D3                     __end_of_lcd_wr:
  1574  007E                     btemp	set	126	;btemp
  1575  007E                     wtemp0	set	126
  1576                           
  1577                           	psect	config
  1578                           
  1579                           ;Config register CONFIG @ 0x2007
  1580                           ;	Oscillator Selection bits
  1581                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1582                           ;	Watchdog Timer Enable bit
  1583                           ;	WDTE = OFF, WDT disabled
  1584                           ;	Power-up Timer Enable bit
  1585                           ;	PWRTE = OFF, PWRT disabled
  1586                           ;	RA5/MCLR/VPP Pin Function Select bit
  1587                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1588                           ;	Brown-out Detect Enable bit
  1589                           ;	BOREN = OFF, BOD disabled
  1590                           ;	Low-Voltage Programming Enable bit
  1591                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1592                           ;	Data EE Memory Code Protection bit
  1593                           ;	CPD = OFF, Data memory code protection off
  1594                           ;	Flash Program Memory Code Protection bit
  1595                           ;	CP = OFF, Code protection off
  1596  2007                     	org	8199
  1597  2007  3F38               	dw	16184

Data Sizes:
    Strings     16
    Constant    4
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      2       2
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_questao_a
    _questao_a->_tc_tecla
    _tc_tecla->___bmul
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_lcd_cmd
    _lcd_cmd->_lcd_wr

Critical Paths under _main in BANK0

    _main->_questao_a

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1378
                           _lcd_init
                          _questao_a
 ---------------------------------------------------------------------------------
 (1) _questao_a                                            3     3      0    1266
                                             13 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _tc_tecla                                             9     7      2     737
                                              4 COMMON     9     7      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     320
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _lcd_str                                              3     3      0     235
                                              6 COMMON     3     3      0
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (3) _lcd_dat                                              3     3      0     112
                                              3 COMMON     3     3      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     112
                                              6 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0     112
                                              3 COMMON     3     3      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (4) _lcd_wr                                               3     3      0      90
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_init
     _lcd_cmd
       _lcd_wr
   _questao_a
     _lcd_cmd
     _lcd_dat
       _lcd_wr
     _lcd_str
       _lcd_dat
     _tc_tecla
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      2       2       3        2.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Sep 28 15:19:31 2022

                      pc 0002           ___bmul@product 0072                       l50 06D2  
                     l53 0689                       l37 0701                       l56 06AB  
                     l80 07D3                       l65 0667                       l59 0731  
                     l84 076B                       l96 07A3                       l89 0790  
                     fsr 0004                      l106 07FD                      l218 0651  
                    l900 06C7                      l902 06CC                      l910 0693  
                    l912 069C                      l904 068B                      l920 063F  
                    l914 069F                      l906 068E                      l922 0643  
                    l940 067A                      l932 0669                      l916 06A8  
                    l908 0690                      l924 0647                      l942 067D  
                    l934 066C                      l950 065A                      l926 0649  
                    l918 063E                      l944 0686                      l936 066E  
                    l952 065E                      l928 0650                      l890 06B0  
                    l938 0671                      l946 0653                      l970 0753  
                    l954 0732                      l948 0655                      l980 0778  
                    l964 073D                      l956 0735                      l990 079D  
                    l974 075A                      l966 0746                      l958 073C  
                    l896 06B1                      l888 06AD                      l984 077F  
                    l976 0764                      l968 074A                      l898 06C6  
                    l994 07A7                      l986 0789                      l978 076F  
                    l988 0794                      l996 07B2                      l998 07BA  
                    _RA0 0028                      _RB3 0033                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
                    u300 0650                      u301 064F                      u310 0667  
                    u311 0666                      u400 07A7                      u320 074A  
                    u401 07A6                      u321 0749                      u410 07C4  
                    u330 0759                      u411 07C3                      u331 0758  
                    u260 06C3                      u420 07DD                      u340 076A  
                    u261 06BF                      u421 07DC                      u341 0769  
                    u254 06B9                      u430 07E3                      u350 076F  
                    u255 06B7                      u431 07E2                      u351 076E  
                    u280 06D2                      u440 07E8                      u360 077E  
                    u281 06D1                      u441 07E7                      u425 07D9  
                    u361 077D                      u274 06C6                      u290 0643  
                    u450 07ED                      u370 078F                      u291 0642  
                    u451 07EC                      u371 078E                      u507 0773  
                    u460 07F7                      u380 0794                      u461 07F6  
                    u517 0798                      u381 0793                      u390 07A3  
                    u470 06EF                      u527 07C8                      u391 07A2  
                    u471 06EE                      u480 0701                      u537 0697  
                    u481 0700                      u547 06A3                      u557 070A  
                    u567 0718                      u577 0720                      u497 074E  
                    u587 0675                      u597 0681                      fsr0 0004  
                   l1000 07BE                     l1010 07ED                     l1002 07C4  
                   l1012 07F1                     l1004 07DD                     l1030 0714  
                   l1022 0702                     l1014 07F7                     l1006 07E3  
                   l1040 072B                     l1032 071E                     l1024 0706  
                   l1016 07F8                     l1008 07E8                     l1042 072D  
                   l1034 0725                     l1026 070F                     l1018 07FC  
                   l1050 06D9                     l1044 072F                     l1036 0727  
                   l1028 0712                     l1060 06F3                     l1052 06DB  
                   l1038 0729                     l1062 06F5                     l1054 06DF  
                   l1046 06D3                     l1070 0635                     l1056 06E9  
                   l1064 06FB                     l1048 06D7                     l1072 0638  
                   l1058 06EF                     l1074 0639                     l1066 062E  
                   l1076 063A                     l1068 0631                     STR_1 000B  
                   _main 062E                     btemp 007E                     start 0000  
      ___bmul@multiplier 0073                    ?_main 0070                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
        __end_of_lcd_dat 06AC          __end_of_lcd_cmd 068A          __end_of_lcd_str 0668  
                  _linha 0007                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FE             __end_of_main 063D  
                 ??_main 007E          tc_tecla@timeout 0074         __end_of_lcd_init 0732  
                 ___bmul 063D                   _lcd_wr 06AC                ??_lcd_dat 0073  
              ??_lcd_cmd 0073         __end_of_tc_tecla 07FE                ??_lcd_str 0076  
__end_of__initialization 07FE      ___bmul@multiplicand 0070           __pcstackCOMMON 0070  
          __end_of_linha 000B              tc_tecla@ret 007B              tc_tecla@tmp 007A  
             __pmaintext 062E                  ?___bmul 0070                  ?_lcd_wr 0070  
              ?_lcd_init 0070               __stringtab 0001                ?_tc_tecla 0074  
                __ptext1 06D3                  __ptext2 0732                  __ptext3 063D  
                __ptext4 0652                  __ptext5 068A                  __ptext6 0702  
                __ptext7 0668                  __ptext8 06AC                  _lcd_dat 068A  
                _lcd_cmd 0668                  _lcd_str 0652                  lcd_wr@i 0072  
             ??_lcd_init 0076     end_of_initialization 07FE               ??_tc_tecla 0076  
      __end_of_questao_a 0702               lcd_dat@val 0075               lcd_cmd@val 0075  
             lcd_str@str 0077           __end_of___bmul 0652           __end_of_lcd_wr 06D3  
    start_initialization 07FE                 ??___bmul 0071                 ??_lcd_wr 0070  
              ___latbits 0000            __pcstackBANK0 0020               tc_tecla@to 0078  
              __pstrings 0001                 ?_lcd_dat 0070                 ?_lcd_cmd 0070  
               ?_lcd_str 0070                 _PCONbits 008E              __stringbase 0006  
              _questao_a 06D3                lcd_wr@val 0071               questao_a@i 0020  
     __end_of__stringtab 0007               ?_questao_a 0070                tc_tecla@i 007C  
         questao_a@tecla 0021                 _lcd_init 0702                 _tc_tecla 0732  
               lcd_str@i 0078                stringcode 0001              ??_questao_a 007D  
               stringdir 0001                 stringtab 0001  
